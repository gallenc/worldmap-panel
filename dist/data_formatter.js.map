{"version":3,"sources":["../src/data_formatter.js"],"names":["_","decodeGeoHash","DataFormatter","ctrl","kbn","data","series","length","highestValue","lowestValue","Number","MAX_VALUE","forEach","serie","lastPoint","last","datapoints","lastValue","isArray","location","find","locations","loc","key","toUpperCase","alias","isString","push","value","valueFormatted","valueRounded","dataValue","locationName","name","locationLatitude","latitude","locationLongitude","longitude","stats","panel","valueName","roundValue","parseInt","decimals","valueRange","dataList","esGeoPoint","esMetric","datapoint","encodedGeohash","decodedGeohash","esLocationName","dataNames","_x","target","pos","lastIndexOf","substring","_i","latvar","lonvar","valvar","_y","includes","dp","num","_z","isNaN","tableData","geohash","tableLabel","metric","type","columnNames","columns","column","columnIndex","text","rows","row"],"mappings":"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","file":"data_formatter.js","sourcesContent":["import _ from 'lodash';\nimport decodeGeoHash from './geohash';\n\nexport default class DataFormatter {\n  constructor(ctrl, kbn) {\n    this.ctrl = ctrl;\n    this.kbn = kbn;\n  }\n\n  setValues(data) {\n    if (this.ctrl.series && this.ctrl.series.length > 0) {\n      let highestValue = 0;\n      let lowestValue = Number.MAX_VALUE;\n\n      this.ctrl.series.forEach((serie) => {\n        const lastPoint = _.last(serie.datapoints);\n        const lastValue = _.isArray(lastPoint) ? lastPoint[0] : null;\n        const location = _.find(this.ctrl.locations, (loc) => { return loc.key.toUpperCase() === serie.alias.toUpperCase(); });\n\n        if (!location) return;\n\n        if (_.isString(lastValue)) {\n          data.push({key: serie.alias, value: 0, valueFormatted: lastValue, valueRounded: 0});\n        } else {\n          const dataValue = {\n            key: serie.alias,\n            locationName: location.name,\n            locationLatitude: location.latitude,\n            locationLongitude: location.longitude,\n            value: serie.stats[this.ctrl.panel.valueName],\n            valueFormatted: lastValue,\n            valueRounded: 0\n          };\n\n          if (dataValue.value > highestValue) highestValue = dataValue.value;\n          if (dataValue.value < lowestValue) lowestValue = dataValue.value;\n\n          dataValue.valueRounded = this.kbn.roundValue(dataValue.value, parseInt(this.ctrl.panel.decimals, 10) || 0);\n          data.push(dataValue);\n        }\n      });\n      data.highestValue = highestValue;\n      data.lowestValue = lowestValue;\n      data.valueRange = highestValue - lowestValue;\n    }\n  }\n\n  setGeohashValues(dataList, data) {\n    if (!this.ctrl.panel.esGeoPoint || !this.ctrl.panel.esMetric) return;\n\n    if (dataList && dataList.length > 0) {\n      let highestValue = 0;\n      let lowestValue = Number.MAX_VALUE;\n\n      dataList[0].datapoints.forEach((datapoint) => {\n        const encodedGeohash = datapoint[this.ctrl.panel.esGeoPoint];\n        const decodedGeohash = decodeGeoHash(encodedGeohash);\n\n        const dataValue = {\n          key: encodedGeohash,\n          locationName: this.ctrl.panel.esLocationName ? datapoint[this.ctrl.panel.esLocationName] : encodedGeohash,\n          locationLatitude: decodedGeohash.latitude,\n          locationLongitude: decodedGeohash.longitude,\n          value: datapoint[this.ctrl.panel.esMetric],\n          valueFormatted: datapoint[this.ctrl.panel.esMetric],\n          valueRounded: 0\n        };\n\n        if (dataValue.value > highestValue) highestValue = dataValue.value;\n        if (dataValue.value < lowestValue) lowestValue = dataValue.value;\n\n        dataValue.valueRounded = this.kbn.roundValue(dataValue.value, this.ctrl.panel.decimals || 0);\n        data.push(dataValue);\n      });\n\n      data.highestValue = highestValue;\n      data.lowestValue = lowestValue;\n      data.valueRange = highestValue - lowestValue;\n    }\n  }\n\n  setOpenNMSValues(dataList, data) {\n    if (dataList && dataList.length > 0) {\n      let highestValue = 0;\n      let lowestValue = Number.MAX_VALUE;\n\n      // find the datapoint names\n      const dataNames = [];\n      for (let _x = 0; _x < dataList.length; _x += 1) {\n        if (dataList[_x].target) {\n          const pos = dataList[_x].target.lastIndexOf('.latitude');\n          if (pos > 0) {\n            const name = dataList[_x].target.substring(0, pos);\n            dataNames.push(name);\n          }\n        }\n      }\n      // fill in the values for the datapoint names\n      for (let _i = 0; _i < dataNames.length; _i += 1) {\n        let latvar;\n        let lonvar;\n        let valvar;\n        for (let _y = 0; _y < dataList.length; _y += 1) {\n          if (dataList[_y].target && dataList[_y].target.includes(dataNames[_i])) {\n            const datapoints = dataList[_y].datapoints;\n            let dp;\n            let num;\n            if (datapoints && datapoints.length !== 0) {\n              let _z = datapoints.length - 1;\n              // find last value in list which is a number\n              do {\n                dp = datapoints[_z];\n                num = dp[0]; // dp[o] = value dp[1] = timestamp\n                if (!isNaN(num)) break;\n                _z -= 1;\n              } while (_z > 0);\n              if (!isNaN(num)) {\n                if (dataList[_y].target.includes('latitude')) {\n                  latvar = num;\n                } else if (dataList[_y].target.includes('longitude')) {\n                  lonvar = num;\n                } else if (dataList[_y].target.includes('value')) {\n                  valvar = num;\n                }\n              }\n            }\n          }\n        }\n        if (latvar && lonvar && valvar) { // if we have all 3 numbers create a datapoint\n          const dataValue = {\n            key: dataNames[_i],\n            locationName: dataNames[_i],\n            locationLatitude: latvar,\n            locationLongitude: lonvar,\n            value: valvar,\n            valueFormatted: valvar,\n            valueRounded: valvar\n          };\n\n          if (dataValue.value > highestValue) highestValue = dataValue.value;\n          if (dataValue.value < lowestValue) lowestValue = dataValue.value;\n\n          dataValue.valueRounded = this.kbn.roundValue(dataValue.value, this.ctrl.panel.decimals || 0);\n\n          data.push(dataValue);\n        }\n      }\n\n      data.highestValue = highestValue;\n      data.lowestValue = lowestValue;\n      data.valueRange = highestValue - lowestValue;\n    }\n  }\n\n  static tableHandler(tableData) {\n    const datapoints = [];\n\n    if (tableData.type === 'table') {\n      const columnNames = {};\n\n      tableData.columns.forEach((column, columnIndex) => {\n        columnNames[columnIndex] = column.text;\n      });\n\n      tableData.rows.forEach((row) => {\n        const datapoint = {};\n\n        row.forEach((value, columnIndex) => {\n          const key = columnNames[columnIndex];\n          datapoint[key] = value;\n        });\n\n        datapoints.push(datapoint);\n      });\n    }\n\n    return datapoints;\n  }\n\n  setTableValues(tableData, data) {\n    if (tableData && tableData.length > 0) {\n      let highestValue = 0;\n      let lowestValue = Number.MAX_VALUE;\n\n      tableData[0].forEach((datapoint) => {\n        if (!datapoint.geohash) {\n          return;\n        }\n\n        const encodedGeohash = datapoint.geohash;\n        const decodedGeohash = decodeGeoHash(encodedGeohash);\n\n        const dataValue = {\n          key: encodedGeohash,\n          locationName: datapoint[this.ctrl.panel.tableLabel] || 'n/a',\n          locationLatitude: decodedGeohash.latitude,\n          locationLongitude: decodedGeohash.longitude,\n          value: datapoint.metric,\n          valueFormatted: datapoint.metric,\n          valueRounded: 0\n        };\n\n        if (dataValue.value > highestValue) highestValue = dataValue.value;\n        if (dataValue.value < lowestValue) lowestValue = dataValue.value;\n\n        dataValue.valueRounded = this.kbn.roundValue(dataValue.value, this.ctrl.panel.decimals || 0);\n        data.push(dataValue);\n      });\n\n      data.highestValue = highestValue;\n      data.lowestValue = lowestValue;\n      data.valueRange = highestValue - lowestValue;\n    }\n  }\n}\n"]}